import { Context } from 'telegraf';
import { TEXTS, KEYBOARDS } from '../config';
import { db } from '../services/database';
import { logger } from '../utils/logger';
import { UserLevel } from '../types';

export async function callbackHandler(ctx: Context) {
  try {
    if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) {
      return;
    }

    const user = await db.getUserByTelegramId(ctx.from!.id);
    if (!user) {
      await ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const data = ctx.callbackQuery.data;
    
    // Answer callback query to remove loading state
    await ctx.answerCbQuery();

    switch (data) {
      case 'free_community':
        await handleFreeCommunity(ctx, user);
        break;
        
      case 'paid_club':
        await handlePaidClub(ctx, user);
        break;
        
      case 'back_to_main':
        await handleBackToMain(ctx, user);
        break;
        
      case 'level_base':
      case 'level_bro':
      case 'level_pro':
        await handleLevelSelection(ctx, user, data);
        break;
        
      case 'subscribe':
        await handleSubscribe(ctx, user);
        break;
        
      case 'materials_programs':
      case 'materials_recovery':
      case 'materials_nutrition':
      case 'materials_faq':
        await handleMaterials(ctx, user, data);
        break;
        
      case 'upgrade_bro':
      case 'upgrade_pro':
        await handleUpgrade(ctx, user, data);
        break;
        
      case 'retention_accept':
        await handleRetentionAccept(ctx, user);
        break;
        
      case 'retention_decline':
        await handleRetentionDecline(ctx, user);
        break;
        
      default:
        logger.warn(`Unknown callback data: ${data}`);
    }
  } catch (error) {
    logger.error('Callback handler error:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

async function handleFreeCommunity(ctx: Context, user: any) {
  await ctx.editMessageText(TEXTS.FREE_COMMUNITY, {
    reply_markup: KEYBOARDS.FREE_COMMUNITY,
    parse_mode: 'Markdown',
  });
  
  await db.logUserAction(user.id, 'free_community_selected', user.level);
}

async function handlePaidClub(ctx: Context, user: any) {
  await ctx.editMessageText(TEXTS.CLUB_DESCRIPTION, {
    reply_markup: KEYBOARDS.CLUB_LEVELS,
    parse_mode: 'Markdown',
  });
  
  await db.logUserAction(user.id, 'paid_club_selected', user.level);
}

async function handleBackToMain(ctx: Context, user: any) {
  await ctx.editMessageText(TEXTS.WELCOME, {
    reply_markup: KEYBOARDS.MAIN_MENU,
    parse_mode: 'Markdown',
  });
}

async function handleLevelSelection(ctx: Context, user: any, data: string) {
  const levelMap: Record<string, UserLevel> = {
    'level_base': UserLevel.BASE,
    'level_bro': UserLevel.BRO,
    'level_pro': UserLevel.PRO,
  };
  
  const selectedLevel = levelMap[data];
  const levelNames: Record<string, string> = {
    'BASE': 'BASE MODE',
    'BRO': 'BRO MODE',
    'PRO': 'PRO MODE',
  };
  
  const message = `üî• **${levelNames[selectedLevel]}**

${getLevelDescription(selectedLevel)}

üöÄ **–û—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç—É–ø** ‚Üí Tribute`;

  await ctx.editMessageText(message, {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç—É–ø', callback_data: 'subscribe' }],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'paid_club' }]
      ]
    },
    parse_mode: 'Markdown',
  });
  
  await db.logUserAction(user.id, 'level_selected', user.level, { selectedLevel });
}

async function handleSubscribe(ctx: Context, user: any) {
  // TODO: Integrate with Tribute
  const tributeUrl = 'https://tribute.to/workoutbro'; // Replace with actual Tribute URL
  
  await ctx.editMessageText(
    `üöÄ **–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞**

–ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:
${tributeUrl}

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ "–Ø –æ–ø–ª–∞—Ç–∏–ª" –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞.`,
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url: tributeUrl }],
          [{ text: '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data: 'payment_confirmed' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'paid_club' }]
        ]
      },
      parse_mode: 'Markdown',
    }
  );
  
  await db.logUserAction(user.id, 'subscribe_initiated', user.level);
}

async function handleMaterials(ctx: Context, user: any, data: string) {
  const categoryMap: Record<string, string> = {
    'materials_programs': '–ü—Ä–æ–≥—Ä–∞–º–º—ã',
    'materials_recovery': '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ',
    'materials_nutrition': '–ü–∏—Ç–∞–Ω–∏–µ',
    'materials_faq': 'FAQ',
  };
  
  const category = categoryMap[data];
  
  // TODO: Get actual materials from database
  const materials = [
    { title: '21-–¥–Ω–µ–≤–Ω–∞—è –±–∞–∑–∞', url: 'https://example.com/base' },
    { title: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤', url: 'https://example.com/beginner' },
  ];
  
  let message = `üìö **${category}**\n\n`;
  
  materials.forEach((material, index) => {
    message += `${index + 1}. [${material.title}](${material.url})\n`;
  });
  
  await ctx.editMessageText(message, {
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º', callback_data: 'back_to_materials' }]
      ]
    },
    parse_mode: 'Markdown',
  });
  
  await db.logUserAction(user.id, 'materials_accessed', user.level, { category });
}

async function handleUpgrade(ctx: Context, user: any, data: string) {
  const upgradeMap: Record<string, string> = {
    'upgrade_bro': 'BASE ‚Üí BRO',
    'upgrade_pro': 'BRO ‚Üí PRO',
  };
  
  const upgrade = upgradeMap[data];
  
  await ctx.editMessageText(
    `‚¨ÜÔ∏è **–ê–ø–≥—Ä–µ–π–¥: ${upgrade}**

–°—Ä–∞–≤–Ω–∏ —É—Ä–æ–≤–Ω–∏ –∏ –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π:

**BASE MODE** ‚Äî –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
**BRO MODE** ‚Äî + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç
**PRO MODE** ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ –≤–µ–¥–µ–Ω–∏–µ

üöÄ **–û—Ñ–æ—Ä–º–∏—Ç—å –∞–ø–≥—Ä–µ–π–¥** ‚Üí Tribute`,
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –∞–ø–≥—Ä–µ–π–¥', callback_data: 'subscribe' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
        ]
      },
      parse_mode: 'Markdown',
    }
  );
  
  await db.logUserAction(user.id, 'upgrade_initiated', user.level, { upgrade });
}

async function handleRetentionAccept(ctx: Context, user: any) {
  // TODO: Process retention offer acceptance
  await ctx.editMessageText(
    'üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –¥–æ—Å—Ç—É–ø –ø—Ä–æ–¥–ª–µ–Ω —Å–æ —Å–∫–∏–¥–∫–æ–π. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—à—å—Å—è —Å –Ω–∞–º–∏!',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
        ]
      }
    }
  );
  
  await db.logUserAction(user.id, 'retention_accepted', user.level);
}

async function handleRetentionDecline(ctx: Context, user: any) {
  await ctx.editMessageText(
    'üò¢ –ñ–∞–ª—å, —á—Ç–æ —Ç—ã —É—Ö–æ–¥–∏—à—å. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –º—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞!',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
        ]
      }
    }
  );
  
  await db.logUserAction(user.id, 'retention_declined', user.level);
}

function getLevelDescription(level: UserLevel): string {
  switch (level) {
    case UserLevel.BASE:
      return '–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º (–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)';
    case UserLevel.BRO:
      return '–í—Å—ë –∏–∑ BASE + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç';
    case UserLevel.PRO:
      return '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ –≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–æ–º';
    default:
      return '';
  }
}
