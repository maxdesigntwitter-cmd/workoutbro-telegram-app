import { Context } from 'telegraf';
import { botConfig } from '../config';
import { db } from '../services/database';
import { logger } from '../utils/logger';
import { UserLevel } from '../types';

function isAdmin(userId: number): boolean {
  return botConfig.adminTelegramIds.includes(userId);
}

export const adminHandler = {
  async broadcast(ctx: Context) {
    try {
      if (!isAdmin(ctx.from!.id)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return;
      }

      const message = ctx.message;
      if (!('text' in message!)) {
        await ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>');
        return;
      }

      const text = message.text.replace('/broadcast ', '');
      if (!text) {
        await ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>');
        return;
      }

      // TODO: Implement actual broadcast logic
      await ctx.reply(`üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞:\n\n${text}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É?`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data: 'confirm_broadcast' }],
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_broadcast' }]
          ]
        }
      });

      logger.info(`Admin ${ctx.from!.id} prepared broadcast: ${text}`);
    } catch (error) {
      logger.error('Broadcast command error:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.');
    }
  },

  async invite(ctx: Context) {
    try {
      if (!isAdmin(ctx.from!.id)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return;
      }

      const message = ctx.message;
      if (!('text' in message!)) {
        await ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /invite @username LEVEL');
        return;
      }

      const args = message.text.split(' ');
      if (args.length !== 3) {
        await ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /invite @username LEVEL\n\n–£—Ä–æ–≤–Ω–∏: BASE, BRO, PRO');
        return;
      }

      const username = args[1].replace('@', '');
      const level = args[2].toUpperCase() as UserLevel;

      if (!Object.values(UserLevel).includes(level)) {
        await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: BASE, BRO, PRO');
        return;
      }

      // TODO: Find user by username and create invite link
      const inviteLink = await db.createInviteLink(level, undefined, undefined, 1);
      
      await ctx.reply(`üîó –°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è @${username} (${level}):\n\n${inviteLink.link}`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', url: `https://t.me/share/url?url=${inviteLink.link}` }]
          ]
        }
      });

      logger.info(`Admin ${ctx.from!.id} created invite for @${username} (${level})`);
    } catch (error) {
      logger.error('Invite command error:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.');
    }
  },

  async approve(ctx: Context) {
    try {
      if (!isAdmin(ctx.from!.id)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return;
      }

      const message = ctx.message;
      if (!('text' in message!)) {
        await ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /approve <subscription_id>');
        return;
      }

      const subscriptionId = message.text.replace('/approve ', '');
      if (!subscriptionId) {
        await ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /approve <subscription_id>');
        return;
      }

      // TODO: Implement approval logic
      await ctx.reply(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ ${subscriptionId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞`);

      logger.info(`Admin ${ctx.from!.id} approved subscription: ${subscriptionId}`);
    } catch (error) {
      logger.error('Approve command error:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.');
    }
  },

  async revoke(ctx: Context) {
    try {
      if (!isAdmin(ctx.from!.id)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return;
      }

      const message = ctx.message;
      if (!('text' in message!)) {
        await ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revoke @username');
        return;
      }

      const username = message.text.replace('/revoke ', '').replace('@', '');
      if (!username) {
        await ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revoke @username');
        return;
      }

      // TODO: Implement revoke logic
      await ctx.reply(`üö´ –î–æ—Å—Ç—É–ø –¥–ª—è @${username} –æ—Ç–æ–∑–≤–∞–Ω`);

      logger.info(`Admin ${ctx.from!.id} revoked access for @${username}`);
    } catch (error) {
      logger.error('Revoke command error:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –¥–æ—Å—Ç—É–ø–∞.');
    }
  },

  async stats(ctx: Context) {
    try {
      if (!isAdmin(ctx.from!.id)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return;
      }

      const analytics = await db.getUserAnalytics();
      
      const statsMessage = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ: ${analytics.totalUsers}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (30 –¥–Ω–µ–π): ${analytics.activeUsers}
‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${analytics.newUsersToday}

üìà **–ü–æ —É—Ä–æ–≤–Ω—è–º:**
‚Ä¢ FREE: ${analytics.levelCounts[UserLevel.FREE] || 0}
‚Ä¢ BASE: ${analytics.levelCounts[UserLevel.BASE] || 0}
‚Ä¢ BRO: ${analytics.levelCounts[UserLevel.BRO] || 0}
‚Ä¢ PRO: ${analytics.levelCounts[UserLevel.PRO] || 0}

üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`;

      await ctx.reply(statsMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_stats' }]
          ]
        }
      });

      logger.info(`Admin ${ctx.from!.id} requested stats`);
    } catch (error) {
      logger.error('Stats command error:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
  }
};
