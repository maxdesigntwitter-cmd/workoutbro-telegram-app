import { CronJob } from 'cron';
import { botConfig } from '../config';
import { db } from '../services/database';
import { logger } from '../utils/logger';
import { UserLevel } from '../types';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export function setupCronJobs() {
  // Check for expiring subscriptions (daily at 10:00)
  new CronJob('0 10 * * *', async () => {
    try {
      await checkExpiringSubscriptions();
    } catch (error) {
      logger.error('Cron job error (expiring subscriptions):', error);
    }
  }, null, true, 'Europe/Moscow');

  // Check for expired subscriptions (daily at 11:00)
  new CronJob('0 11 * * *', async () => {
    try {
      await checkExpiredSubscriptions();
    } catch (error) {
      logger.error('Cron job error (expired subscriptions):', error);
    }
  }, null, true, 'Europe/Moscow');

  // Send onboarding messages (daily at 12:00)
  new CronJob('0 12 * * *', async () => {
    try {
      await sendOnboardingMessages();
    } catch (error) {
      logger.error('Cron job error (onboarding):', error);
    }
  }, null, true, 'Europe/Moscow');

  logger.info('Cron jobs initialized');
}

async function checkExpiringSubscriptions() {
  const expiringUsers = await db.getExpiringUsers(botConfig.retentionDaysBeforeExpire);
  
  for (const user of expiringUsers) {
    try {
      const daysLeft = Math.ceil((user.expiresAt!.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));
      
      const message = `‚è∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞**

–¢–≤–æ–π –¥–æ—Å—Ç—É–ø –∏—Å—Ç–µ–∫–∞–µ—Ç ${user.expiresAt!.toLocaleDateString('ru-RU')}

–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft}

–•–æ—á–µ—à—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ü–µ–Ω–µ? –ù–∞–∂–º–∏: –û—Å—Ç–∞—Ç—å—Å—è –∑–∞ 350 ‚ÇΩ`;

      await sendMessageToUser(Number(user.telegramId), message, {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚úÖ –û—Å—Ç–∞—Ç—å—Å—è –∑–∞ 350 ‚ÇΩ', callback_data: 'retention_accept' }],
            [{ text: '‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data: 'retention_decline' }]
          ]
        }
      });

      await db.logUserAction(user.id, 'expiry_reminder_sent', user.level, { daysLeft });
      
    } catch (error) {
      logger.error(`Error sending expiry reminder to user ${user.id}:`, error);
    }
  }

  logger.info(`Sent expiry reminders to ${expiringUsers.length} users`);
}

async function checkExpiredSubscriptions() {
  const expiredUsers = await db.getExpiredUsers();
  
  for (const user of expiredUsers) {
    try {
      // Update user level to FREE
      await db.updateUserLevel(user.id, UserLevel.FREE);
      
      const message = `üò¢ **–î–æ—Å—Ç—É–ø –∏—Å—Ç–µ–∫**

–¢–≤–æ–π –¥–æ—Å—Ç—É–ø –∫ WorkoutBro Club –∏—Å—Ç–µ–∫.

–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–ª—É–± —Å–æ —Å–∫–∏–¥–∫–æ–π 30%? –ù–∞–∂–º–∏: –í–µ—Ä–Ω—É—Ç—å—Å—è`;

      await sendMessageToUser(Number(user.telegramId), message, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üéÅ –í–µ—Ä–Ω—É—Ç—å—Å—è —Å–æ —Å–∫–∏–¥–∫–æ–π', callback_data: 'retention_offer' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
          ]
        }
      });

      await db.logUserAction(user.id, 'subscription_expired', UserLevel.FREE);
      
    } catch (error) {
      logger.error(`Error handling expired subscription for user ${user.id}:`, error);
    }
  }

  logger.info(`Processed ${expiredUsers.length} expired subscriptions`);
}

async function sendOnboardingMessages() {
  // Get users who joined in the last 7 days and haven't received onboarding
  const recentUsers = await db.getRecentUsers(7);
  
  for (const user of recentUsers) {
    try {
      const daysSinceJoin = Math.floor((new Date().getTime() - user.createdAt.getTime()) / (1000 * 60 * 60 * 24));
      
      let message = '';
      let shouldSend = false;

      if (daysSinceJoin === 1) {
        message = `üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WorkoutBro!**

–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:
‚Ä¢ /materials ‚Äî –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –∏ –≥–∞–π–¥–∞–º
‚Ä¢ /status ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å
‚Ä¢ /support ‚Äî –ø–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞

–ù–∞—á–Ω–∏ —Å —Ä–∞–∑–¥–µ–ª–∞ "–ü—Ä–æ–≥—Ä–∞–º–º—ã" –≤ /materials!`;
        shouldSend = true;
      } else if (daysSinceJoin === 3) {
        message = `üí° **–°–æ–≤–µ—Ç –¥–Ω—è**

–ó–Ω–∞–µ—à—å —á—Ç–æ —Ç–∞–∫–æ–µ RPE (Rate of Perceived Exertion)?

–≠—Ç–æ —à–∫–∞–ª–∞ –æ—Ç 1 –¥–æ 10 –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:
‚Ä¢ 1-3: –û—á–µ–Ω—å –ª–µ–≥–∫–æ
‚Ä¢ 4-6: –£–º–µ—Ä–µ–Ω–Ω–æ
‚Ä¢ 7-8: –¢—è–∂–µ–ª–æ
‚Ä¢ 9-10: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ

–ò—Å–ø–æ–ª—å–∑—É–π RPE –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏!`;
        shouldSend = true;
      } else if (daysSinceJoin === 7) {
        message = `üöÄ **–ù–µ–¥–µ–ª—è —Å WorkoutBro!**

–ö–∞–∫ –¥–µ–ª–∞ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏? –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?

‚Ä¢ –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –≤ /support
‚Ä¢ –ò–∑—É—á–∏ –Ω–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ /materials
‚Ä¢ –ê–ø–≥—Ä–µ–π–¥–Ω–∏—Å—å –¥–æ BRO –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏

–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™`;
        shouldSend = true;
      }

      if (shouldSend) {
        await sendMessageToUser(user.telegramId, message);
        await db.logUserAction(user.id, 'onboarding_sent', user.level, { day: daysSinceJoin });
      }
      
    } catch (error) {
      logger.error(`Error sending onboarding to user ${user.id}:`, error);
    }
  }

  logger.info(`Sent onboarding messages to recent users`);
}

async function sendMessageToUser(telegramId: number, text: string, options?: any) {
  try {
    // TODO: Implement actual message sending using bot instance
    // This is a placeholder - in real implementation, you'd need access to bot instance
    logger.info(`Would send message to ${telegramId}: ${text}`);
  } catch (error) {
    logger.error(`Error sending message to user ${telegramId}:`, error);
  }
}

// Add this method to DatabaseService
declare module './database' {
  interface DatabaseService {
    getRecentUsers(days: number): Promise<any[]>;
  }
}

// Extend DatabaseService with getRecentUsers method
import { DatabaseService } from './database';

DatabaseService.prototype.getRecentUsers = async function(days: number) {
  const since = new Date();
  since.setDate(since.getDate() - days);
  
  return await prisma.user.findMany({
    where: {
      createdAt: {
        gte: since,
      },
    },
    orderBy: {
      createdAt: 'desc',
    },
  });
};
