const { Telegraf } = require('telegraf');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const bot = new Telegraf(process.env.BOT_TOKEN);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∑–∞—è–≤–æ–∫ PRO
const userStates = new Map();

// –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç—ã
const TEXTS = {
  WELCOME: `–ü—Ä–∏–≤–µ—Ç, –±—Ä–æ! üëã

–Ø WorkoutBro Bot. –ü–æ–º–æ–≥—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —É–º–æ–º, –±–µ–∑ —Ö–∞–æ—Å–∞ –∏ –¥–æ–≥–∞–¥–æ–∫.

–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø—É—Ç—å:`
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const KEYBOARDS = {
  MAIN_MENU: {
    inline_keyboard: [
      [{ text: 'üí™ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ', callback_data: 'free_community' }],
      [{ text: 'üî• –ó–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–±', callback_data: 'paid_club' }]
    ]
  }
};

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ —Ñ–∞–π–ª
function saveApplication(userId, username, answers) {
  const application = {
    id: Date.now(),
    userId: userId,
    username: username,
    timestamp: new Date().toISOString(),
    answers: answers
  };
  
  const filePath = path.join(__dirname, 'applications.json');
  
  try {
    let applications = [];
    if (fs.existsSync(filePath)) {
      applications = JSON.parse(fs.readFileSync(filePath, 'utf8'));
    }
    
    applications.push(application);
    fs.writeFileSync(filePath, JSON.stringify(applications, null, 2));
    
    console.log(`Application saved: ${application.id}`);
    return application.id;
  } catch (error) {
    console.error('Error saving application:', error);
    return null;
  }
}

bot.start((ctx) => {
  console.log('Start command received from user:', ctx.from.id);
  ctx.reply(TEXTS.WELCOME, {
    reply_markup: KEYBOARDS.MAIN_MENU,
    parse_mode: 'Markdown'
  });
});

bot.on('callback_query', async (ctx) => {
  const data = ctx.callbackQuery.data;
  console.log('Callback received:', data);
  
  ctx.answerCbQuery();
  
  switch (data) {
    case 'free_community':
      ctx.editMessageText('üí™ **–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ**\n\n–≠—Ç–æ –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª WorkoutBro: –º–∏–Ω–∏-–≥–∞–π–¥—ã, —Ä–∞–∑–±–æ—Ä—ã –∏ –≤—ã–∑–æ–≤—ã.\n\n–•–æ—á–µ—à—å —Å–∏—Å—Ç–µ–º—É –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚Äî –∑–∞–≥–ª—è–Ω–∏ –≤ –∫–ª—É–±!', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üëâ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', url: 'https://t.me/yourworkoutbro' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
          ]
        },
        parse_mode: 'Markdown'
      });
      break;
      
    case 'paid_club':
      ctx.editMessageText('üî• **–ó–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–± WorkoutBro**\n\n**BASE MODE** ‚Äî –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º (–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)\n**BRO MODE** ‚Äî + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç\n**PRO MODE** ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ –≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–æ–º', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'BASE MODE', callback_data: 'level_base' }],
            [{ text: 'BRO MODE', callback_data: 'level_bro' }],
            [{ text: 'PRO MODE', callback_data: 'level_pro' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
          ]
        },
        parse_mode: 'Markdown'
      });
      break;
      
    case 'back_to_main':
      ctx.editMessageText(TEXTS.WELCOME, {
        reply_markup: KEYBOARDS.MAIN_MENU,
        parse_mode: 'Markdown'
      });
      break;
      
    case 'level_base':
      ctx.editMessageText('üî• **BASE MODE**\n\n–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º (–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)\n\nüöÄ **–û–ø–ª–∞—Ç–∏—Ç—å** ‚Üí Tribute', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url: 'https://t.me/tribute/app?startapp=sEo4' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'paid_club' }]
          ]
        },
        parse_mode: 'Markdown'
      });
      break;
      
    case 'level_bro':
      ctx.editMessageText('üî• **BRO MODE**\n\n–í—Å—ë –∏–∑ BASE + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç\n\nüöÄ **–û–ø–ª–∞—Ç–∏—Ç—å** ‚Üí Tribute', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url: 'https://t.me/tribute/app?startapp=sEoi' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'paid_club' }]
          ]
        },
        parse_mode: 'Markdown'
      });
      break;
      
    case 'level_pro':
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userId = ctx.from.id;
      userStates.set(userId, {
        step: 1,
        answers: {}
      });
      
      ctx.editMessageText('üìù **–ó–∞—è–≤–∫–∞ –Ω–∞ PRO MODE**\n\n–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∑–∞—è–≤–∫—É –ø–æ —à–∞–≥–∞–º.\n\n**–í–æ–ø—Ä–æ—Å 1/5:**\n\nüèãÔ∏è **–ö–∞–∫–æ–π —É –≤–∞—Å —Ñ–∏—Ç–Ω–µ—Å —É—Ä–æ–≤–µ–Ω—å?**', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üü¢ –ù–æ–≤–∏—á–æ–∫ (–º–µ–Ω–µ–µ 6 –º–µ—Å—è—Ü–µ–≤)', callback_data: 'pro_answer_1_novice' }],
            [{ text: 'üü° –°—Ä–µ–¥–Ω–∏–π (6 –º–µ—Å—è—Ü–µ–≤ - 2 –≥–æ–¥–∞)', callback_data: 'pro_answer_1_intermediate' }],
            [{ text: 'üî¥ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (–±–æ–ª–µ–µ 2 –ª–µ—Ç)', callback_data: 'pro_answer_1_advanced' }],
            [{ text: '‚úèÔ∏è –°–≤–æ–π –æ—Ç–≤–µ—Ç', callback_data: 'pro_answer_1_custom' }],
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'cancel_pro_application' }]
          ]
        },
        parse_mode: 'Markdown'
      });
      break;
      
    case 'cancel_pro_application':
      userStates.delete(ctx.from.id);
      ctx.editMessageText('‚ùå **–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞**\n\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
          ]
        },
        parse_mode: 'Markdown'
      });
      break;
      
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∑–∞—è–≤–∫—É PRO
    case 'pro_answer_1_novice':
      await handleProAnswer(ctx, 1, '–ù–æ–≤–∏—á–æ–∫ (–º–µ–Ω–µ–µ 6 –º–µ—Å—è—Ü–µ–≤)');
      break;
      
    case 'pro_answer_1_intermediate':
      await handleProAnswer(ctx, 1, '–°—Ä–µ–¥–Ω–∏–π (6 –º–µ—Å—è—Ü–µ–≤ - 2 –≥–æ–¥–∞)');
      break;
      
    case 'pro_answer_1_advanced':
      await handleProAnswer(ctx, 1, '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (–±–æ–ª–µ–µ 2 –ª–µ—Ç)');
      break;
      
    case 'pro_answer_1_custom':
      await handleProCustomAnswer(ctx, 1, 'üèãÔ∏è **–ö–∞–∫–æ–π —É –≤–∞—Å —Ñ–∏—Ç–Ω–µ—Å —É—Ä–æ–≤–µ–Ω—å?**');
      break;
      
    // –í–æ–ø—Ä–æ—Å 2 - —á–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    case 'pro_answer_2_1-2':
      await handleProAnswer(ctx, 2, '1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é');
      break;
      
    case 'pro_answer_2_3-4':
      await handleProAnswer(ctx, 2, '3-4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é');
      break;
      
    case 'pro_answer_2_5+':
      await handleProAnswer(ctx, 2, '5+ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é');
      break;
      
    case 'pro_answer_2_custom':
      await handleProCustomAnswer(ctx, 2, '‚è∞ **–°–∫–æ–ª—å–∫–æ –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å?**');
      break;
      
    // –í–æ–ø—Ä–æ—Å 3 - —Ü–µ–ª–∏
    case 'pro_answer_3_mass':
      await handleProAnswer(ctx, 3, '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã');
      break;
      
    case 'pro_answer_3_weight_loss':
      await handleProAnswer(ctx, 3, '–ü–æ—Ö—É–¥–µ–Ω–∏–µ');
      break;
      
    case 'pro_answer_3_maintenance':
      await handleProAnswer(ctx, 3, '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã');
      break;
      
    case 'pro_answer_3_strength':
      await handleProAnswer(ctx, 3, '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∏–ª—ã');
      break;
      
    case 'pro_answer_3_custom':
      await handleProCustomAnswer(ctx, 3, 'üéØ **–ö–∞–∫–∏–µ —É –≤–∞—Å —Ü–µ–ª–∏?**');
      break;
      
    // –í–æ–ø—Ä–æ—Å 4 - –æ–ø—ã—Ç
    case 'pro_answer_4_home':
      await handleProAnswer(ctx, 4, '–î–æ–º–∞—à–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏');
      break;
      
    case 'pro_answer_4_gym_trainer':
      await handleProAnswer(ctx, 4, '–ó–∞–ª —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º');
      break;
      
    case 'pro_answer_4_gym_alone':
      await handleProAnswer(ctx, 4, '–ó–∞–ª —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ');
      break;
      
    case 'pro_answer_4_cardio':
      await handleProAnswer(ctx, 4, '–¢–æ–ª—å–∫–æ –∫–∞—Ä–¥–∏–æ');
      break;
      
    case 'pro_answer_4_custom':
      await handleProCustomAnswer(ctx, 4, 'üí™ **–û–ø—ã—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:**');
      break;
      
    // –í–æ–ø—Ä–æ—Å 5 - –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏)
    case 'pro_answer_5_none':
      await handleProAnswer(ctx, 5, '–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π');
      break;
      
    case 'pro_answer_5_injuries':
      await handleProAnswer(ctx, 5, '–ï—Å—Ç—å —Ç—Ä–∞–≤–º—ã');
      break;
      
    case 'pro_answer_5_time':
      await handleProAnswer(ctx, 5, '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è');
      break;
      
    case 'pro_answer_5_home_only':
      await handleProAnswer(ctx, 5, '–¢–æ–ª—å–∫–æ –¥–æ–º–∞');
      break;
      
    case 'pro_answer_5_custom':
      await handleProCustomAnswer(ctx, 5, '‚ö†Ô∏è **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**');
      break;
      
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
    default:
      if (data.startsWith('approve_')) {
        const approveUserId = data.replace('approve_', '');
        await ctx.editMessageText(
          `‚úÖ **–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!**\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${approveUserId}\n\n–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', url: `tg://user?id=${approveUserId}` }]
              ]
            },
            parse_mode: 'Markdown'
          }
        );
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏
        try {
          await bot.telegram.sendMessage(approveUserId, 
            `üéâ **–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!**\n\n–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ PRO MODE –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä WorkoutBro! üí™`,
            { parse_mode: 'Markdown' }
          );
        } catch (error) {
          console.log('Error notifying user about approval:', error.message);
        }
      } else if (data.startsWith('reject_')) {
        const rejectUserId = data.replace('reject_', '');
        await ctx.editMessageText(
          `‚ùå **–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${rejectUserId}\n\n–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', url: `tg://user?id=${rejectUserId}` }]
              ]
            },
            parse_mode: 'Markdown'
          }
        );
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
        try {
          await bot.telegram.sendMessage(rejectUserId, 
            `üìù **–ü–æ –ø–æ–≤–æ–¥—É –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏**\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ PRO MODE –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.\n\n–í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å BASE –∏–ª–∏ BRO MODE, –∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –æ—Ç–ª–∏—á–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /support`,
            { parse_mode: 'Markdown' }
          );
        } catch (error) {
          console.log('Error notifying user about rejection:', error.message);
        }
      }
      break;
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞—è–≤–æ–∫ PRO
bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  const userState = userStates.get(userId);
  
  if (!userState) return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∑–∞—è–≤–∫—É
  
  const text = ctx.message.text;
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–¥–µ—Ç –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
  if (userState.waitingForCustomAnswer) {
    const step = userState.waitingForCustomAnswer;
    userState.answers[`question_${step}`] = text;
    userState.waitingForCustomAnswer = null;
    userState.step = step + 1;
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    await handleProAnswer(ctx, step, text);
    return;
  }
});

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ PRO –∑–∞—è–≤–∫–∏
async function handleProAnswer(ctx, step, answer) {
  const userId = ctx.from.id;
  const userState = userStates.get(userId);
  
  if (!userState) return;
  
  userState.answers[`question_${step}`] = answer;
  userState.step = step + 1;
  
  try {
    switch (step) {
      case 1:
        await ctx.editMessageText(
          `‚úÖ **–§–∏—Ç–Ω–µ—Å —É—Ä–æ–≤–µ–Ω—å:** ${answer}\n\n**–í–æ–ø—Ä–æ—Å 2/5:**\n\n‚è∞ **–°–∫–æ–ª—å–∫–æ –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å?**`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üü¢ 1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é', callback_data: 'pro_answer_2_1-2' }],
                [{ text: 'üü° 3-4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é', callback_data: 'pro_answer_2_3-4' }],
                [{ text: 'üî¥ 5+ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é', callback_data: 'pro_answer_2_5+' }],
                [{ text: '‚úèÔ∏è –°–≤–æ–π –æ—Ç–≤–µ—Ç', callback_data: 'pro_answer_2_custom' }],
                [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'cancel_pro_application' }]
              ]
            },
            parse_mode: 'Markdown'
          }
        );
        break;
        
      case 2:
        await ctx.editMessageText(
          `‚úÖ **–ß–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:** ${answer}\n\n**–í–æ–ø—Ä–æ—Å 3/5:**\n\nüéØ **–ö–∞–∫–∏–µ —É –≤–∞—Å —Ü–µ–ª–∏?**`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üí™ –ù–∞–±–æ—Ä –º–∞—Å—Å—ã', callback_data: 'pro_answer_3_mass' }],
                [{ text: 'üî• –ü–æ—Ö—É–¥–µ–Ω–∏–µ', callback_data: 'pro_answer_3_weight_loss' }],
                [{ text: '‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã', callback_data: 'pro_answer_3_maintenance' }],
                [{ text: 'üí™ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∏–ª—ã', callback_data: 'pro_answer_3_strength' }],
                [{ text: '‚úèÔ∏è –°–≤–æ–π –æ—Ç–≤–µ—Ç', callback_data: 'pro_answer_3_custom' }],
                [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'cancel_pro_application' }]
              ]
            },
            parse_mode: 'Markdown'
          }
        );
        break;
        
      case 3:
        await ctx.editMessageText(
          `‚úÖ **–¶–µ–ª–∏:** ${answer}\n\n**–í–æ–ø—Ä–æ—Å 4/5:**\n\nüí™ **–û–ø—ã—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:**`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üè† –î–æ–º–∞—à–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', callback_data: 'pro_answer_4_home' }],
                [{ text: 'üèãÔ∏è –ó–∞–ª —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º', callback_data: 'pro_answer_4_gym_trainer' }],
                [{ text: 'üèãÔ∏è –ó–∞–ª —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ', callback_data: 'pro_answer_4_gym_alone' }],
                [{ text: 'üèÉ –¢–æ–ª—å–∫–æ –∫–∞—Ä–¥–∏–æ', callback_data: 'pro_answer_4_cardio' }],
                [{ text: '‚úèÔ∏è –°–≤–æ–π –æ—Ç–≤–µ—Ç', callback_data: 'pro_answer_4_custom' }],
                [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'cancel_pro_application' }]
              ]
            },
            parse_mode: 'Markdown'
          }
        );
        break;
        
      case 4:
        await ctx.editMessageText(
          `‚úÖ **–û–ø—ã—Ç:** ${answer}\n\n**–í–æ–ø—Ä–æ—Å 5/5:**\n\n‚ö†Ô∏è **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚úÖ –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π', callback_data: 'pro_answer_5_none' }],
                [{ text: 'ü©π –ï—Å—Ç—å —Ç—Ä–∞–≤–º—ã', callback_data: 'pro_answer_5_injuries' }],
                [{ text: '‚è∞ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è', callback_data: 'pro_answer_5_time' }],
                [{ text: 'üè† –¢–æ–ª—å–∫–æ –¥–æ–º–∞', callback_data: 'pro_answer_5_home_only' }],
                [{ text: '‚úèÔ∏è –°–≤–æ–π –æ—Ç–≤–µ—Ç', callback_data: 'pro_answer_5_custom' }],
                [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'cancel_pro_application' }]
              ]
            },
            parse_mode: 'Markdown'
          }
        );
        break;
        
      case 5:
        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
        await handleProApplicationComplete(ctx, answer);
        break;
    }
  } catch (error) {
    console.log(`Error processing PRO application step ${step}:`, error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
async function handleProCustomAnswer(ctx, step, question) {
  const userId = ctx.from.id;
  const userState = userStates.get(userId);
  
  if (!userState) return;
  
  userState.waitingForCustomAnswer = step;
  
  await ctx.editMessageText(
    `‚úèÔ∏è **–°–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å ${step}/5:**\n\n${question}\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç:`,
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'cancel_pro_application' }]
        ]
      },
      parse_mode: 'Markdown'
    }
  );
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ PRO
async function handleProApplicationComplete(ctx, lastAnswer) {
  const userId = ctx.from.id;
  const username = ctx.from.username || '–±–µ–∑ username';
  const userState = userStates.get(userId);
  
  console.log(`Processing application completion for user ${userId}`);
  console.log('User state:', userState);
  
  if (!userState) {
    console.log('No user state found, returning');
    return;
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
  userState.answers[`question_5`] = lastAnswer;
  
  console.log('Final answers:', userState.answers);
  
  // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  const userMessage = '‚úÖ **–ó–∞—è–≤–∫–∞ –Ω–∞ PRO MODE –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!**\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ PRO MODE! üöÄ';
  
  await ctx.editMessageText(userMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
      ]
    },
    parse_mode: 'Markdown'
  });
  
  console.log('User message sent');
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ —Ñ–∞–π–ª
  const applicationId = saveApplication(userId, username, userState.answers);
  console.log('Application saved with ID:', applicationId);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
  const adminId = 285485174; // –í–∞—à Telegram ID
  const applicationMessage = `üìù **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ PRO MODE**\n\nüë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** @${username} (ID: ${userId})\n\nüìã **–î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:**\n\n1Ô∏è‚É£ **–§–∏—Ç–Ω–µ—Å —É—Ä–æ–≤–µ–Ω—å:** ${userState.answers.question_1}\n2Ô∏è‚É£ **–ß–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:** ${userState.answers.question_2}\n3Ô∏è‚É£ **–¶–µ–ª–∏:** ${userState.answers.question_3}\n4Ô∏è‚É£ **–û–ø—ã—Ç:** ${userState.answers.question_4}\n5Ô∏è‚É£ **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:** ${lastAnswer}\n\nüí¨ **–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:** [–ù–∞–ø–∏—Å–∞—Ç—å](tg://user?id=${userId})`;
  
  console.log('Attempting to send admin notification...');
  
  try {
    const result = await bot.telegram.sendMessage(adminId, applicationMessage, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', url: `tg://user?id=${userId}` }],
          [{ text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: `approve_${userId}` }],
          [{ text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: `reject_${userId}` }]
        ]
      }
    });
    console.log(`‚úÖ Admin notification sent for user ${userId}, message ID: ${result.message_id}`);
  } catch (error) {
    console.log(`‚ùå Error sending admin notification for user ${userId}:`, error.message);
  }
  
  // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  userStates.delete(userId);
  console.log('User state cleared');
}

console.log('Starting working bot...');
bot.launch()
  .then(() => {
    console.log('‚úÖ Working bot started!');
  })
  .catch((error) => {
    console.error('‚ùå Bot failed:', error);
  });
