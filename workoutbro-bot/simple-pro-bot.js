require('dotenv').config();
const { Telegraf } = require('telegraf');

const bot = new Telegraf(process.env.BOT_TOKEN);

// –¢–µ–∫—Å—Ç—ã
const TEXTS = {
  WELCOME: '–ü—Ä–∏–≤–µ—Ç! –Ø WorkoutBro Bot. –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø—É—Ç—å:',
  FREE_COMMUNITY: 'üí™ **–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ**\n\n–≠—Ç–æ –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª WorkoutBro: –º–∏–Ω–∏-–≥–∞–π–¥—ã, —Ä–∞–∑–±–æ—Ä—ã –∏ –≤—ã–∑–æ–≤—ã.\n\n–•–æ—á–µ—à—å —Å–∏—Å—Ç–µ–º—É –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚Äî –∑–∞–≥–ª—è–Ω–∏ –≤ –∫–ª—É–±!',
  CLUB_LEVELS: 'üèÜ **–ó–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–±**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:',
  BASE_DESCRIPTION: 'üí™ **BASE MODE**\n\n‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ –ø–æ—Å—Ç–∞–º\n‚Ä¢ –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n‚Ä¢ –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\nüí∞ **–¶–µ–Ω–∞:** 990‚ÇΩ/–º–µ—Å—è—Ü',
  BRO_DESCRIPTION: 'üî• **BRO MODE**\n\n‚Ä¢ –í—Å–µ –∏–∑ BASE\n‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ —á–∞—Ç\n‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\nüí∞ **–¶–µ–Ω–∞:** 1990‚ÇΩ/–º–µ—Å—è—Ü',
  PRO_DESCRIPTION: 'üëë **PRO MODE**\n\n‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–æ–º\n‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\nüí∞ **–¶–µ–Ω–∞:** –ü–æ –∑–∞—è–≤–∫–µ'
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const KEYBOARDS = {
  MAIN_MENU: {
    inline_keyboard: [
      [{ text: 'üí™ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ\n—Å–æ–æ–±—â–µ—Å—Ç–≤–æ', callback_data: 'free_community' }],
      [{ text: 'üèÜ –ó–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–±', callback_data: 'paid_club' }]
    ]
  },
  FREE_COMMUNITY: {
    inline_keyboard: [
      [{ text: 'üëâ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', url: 'https://t.me/yourworkoutbro' }],
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
    ]
  },
  CLUB_LEVELS: {
    inline_keyboard: [
      [{ text: 'üí™ BASE', callback_data: 'level_base' }],
      [{ text: 'üî• BRO', callback_data: 'level_bro' }],
      [{ text: 'üëë PRO', callback_data: 'level_pro' }],
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
    ]
  },
  BASE_PAYMENT: {
    inline_keyboard: [
      [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url: 'https://t.me/tribute/app?startapp=sEo4' }],
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'paid_club' }]
    ]
  },
  BRO_PAYMENT: {
    inline_keyboard: [
      [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url: 'https://t.me/tribute/app?startapp=sEoi' }],
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'paid_club' }]
    ]
  },
  PRO_APPLICATION: {
    inline_keyboard: [
      [{ text: 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'pro_application' }],
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'paid_club' }]
    ]
  },
  PRO_QUESTIONS: {
    inline_keyboard: [
      [{ text: 'üèãÔ∏è –ù–æ–≤–∏—á–æ–∫ (–º–µ–Ω–µ–µ 6 –º–µ—Å—è—Ü–µ–≤)', callback_data: 'pro_q1_novice' }],
      [{ text: 'üí™ –°—Ä–µ–¥–Ω–∏–π (6 –º–µ—Å—è—Ü–µ–≤ ‚Äì 2 –≥–æ–¥–∞)', callback_data: 'pro_q1_intermediate' }],
      [{ text: 'üî• –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (–±–æ–ª–µ–µ 2 –ª–µ—Ç)', callback_data: 'pro_q1_advanced' }],
      [{ text: '‚úèÔ∏è –°–≤–æ–π –æ—Ç–≤–µ—Ç', callback_data: 'pro_q1_custom' }],
      [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'back_to_main' }]
    ]
  }
};

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω—É
async function sendProApplicationToAdmin(userId, username, answers) {
  const adminId = 285485174;
  const botToken = '8209346537:AAGKLa-x1zZR0Htp-DlOVjVvUx0L81b8aik';
  
  const applicationMessage = `üìù **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ PRO MODE**\n\nüë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** @${username} (ID: ${userId})\n\nüìã **–î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:**\n\n1Ô∏è‚É£ **–§–∏—Ç–Ω–µ—Å —É—Ä–æ–≤–µ–Ω—å:** ${answers.level}\n2Ô∏è‚É£ **–ß–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:** ${answers.frequency}\n3Ô∏è‚É£ **–¶–µ–ª–∏:** ${answers.goals}\n4Ô∏è‚É£ **–û–ø—ã—Ç:** ${answers.experience}\n5Ô∏è‚É£ **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:** ${answers.special}\n\nüí¨ **–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:** [–ù–∞–ø–∏—Å–∞—Ç—å](tg://user?id=${userId})`;
  
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', url: `tg://user?id=${userId}` }],
      [{ text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: `approve_${userId}` }],
      [{ text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: `reject_${userId}` }]
    ]
  };
  
  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: adminId,
        text: applicationMessage,
        parse_mode: 'Markdown',
        reply_markup: keyboard
      })
    });
    
    const result = await response.json();
    
    if (result.ok) {
      console.log(`‚úÖ Admin notification sent for user ${userId}, message ID: ${result.result.message_id}`);
      return true;
    } else {
      console.log(`‚ùå Error sending admin notification: ${result.description}`);
      return false;
    }
  } catch (error) {
    console.log(`‚ùå Error sending admin notification: ${error.message}`);
    return false;
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  console.log(`User ${ctx.from.id} started bot`);
  try {
    await ctx.reply(TEXTS.WELCOME, {
      reply_markup: KEYBOARDS.MAIN_MENU,
      parse_mode: 'Markdown'
    });
    console.log(`Reply sent to user ${ctx.from.id}`);
  } catch (error) {
    console.log(`Error sending reply to user ${ctx.from.id}:`, error.message);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /pro_application
bot.command('pro_application', (ctx) => {
  console.log(`User ${ctx.from.id} requested PRO application`);
  ctx.reply('üìù **–ó–∞—è–≤–∫–∞ –Ω–∞ PRO MODE**\n\n**–í–æ–ø—Ä–æ—Å 1/5:**\n\nüèãÔ∏è **–ö–∞–∫–æ–π —É –≤–∞—Å —Ñ–∏—Ç–Ω–µ—Å —É—Ä–æ–≤–µ–Ω—å?**', {
    reply_markup: KEYBOARDS.PRO_QUESTIONS,
    parse_mode: 'Markdown'
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query
bot.on('callback_query', async (ctx) => {
  const data = ctx.callbackQuery.data;
  const userId = ctx.from.id;
  const username = ctx.from.username || '–±–µ–∑ username';
  
  console.log(`Callback received: ${data} from user ${userId}`);
  
  await ctx.answerCbQuery();
  
  try {
    switch (data) {
      case 'free_community':
        await ctx.editMessageText(TEXTS.FREE_COMMUNITY, {
          reply_markup: KEYBOARDS.FREE_COMMUNITY,
          parse_mode: 'Markdown'
        });
        break;
        
      case 'paid_club':
        await ctx.editMessageText(TEXTS.CLUB_LEVELS, {
          reply_markup: KEYBOARDS.CLUB_LEVELS,
          parse_mode: 'Markdown'
        });
        break;
        
      case 'level_base':
        await ctx.editMessageText(TEXTS.BASE_DESCRIPTION, {
          reply_markup: KEYBOARDS.BASE_PAYMENT,
          parse_mode: 'Markdown'
        });
        break;
        
      case 'level_bro':
        await ctx.editMessageText(TEXTS.BRO_DESCRIPTION, {
          reply_markup: KEYBOARDS.BRO_PAYMENT,
          parse_mode: 'Markdown'
        });
        break;
        
      case 'level_pro':
        await ctx.editMessageText(TEXTS.PRO_DESCRIPTION, {
          reply_markup: KEYBOARDS.PRO_APPLICATION,
          parse_mode: 'Markdown'
        });
        break;
        
      case 'pro_application':
        await ctx.editMessageText('üìù **–ó–∞—è–≤–∫–∞ –Ω–∞ PRO MODE**\n\n**–í–æ–ø—Ä–æ—Å 1/5:**\n\nüèãÔ∏è **–ö–∞–∫–æ–π —É –≤–∞—Å —Ñ–∏—Ç–Ω–µ—Å —É—Ä–æ–≤–µ–Ω—å?**', {
          reply_markup: KEYBOARDS.PRO_QUESTIONS,
          parse_mode: 'Markdown'
        });
        break;
        
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã PRO –∑–∞—è–≤–∫–∏
      case 'pro_q1_novice':
        await handleProAnswer(ctx, 1, '–ù–æ–≤–∏—á–æ–∫ (–º–µ–Ω–µ–µ 6 –º–µ—Å—è—Ü–µ–≤)');
        break;
        
      case 'pro_q1_intermediate':
        await handleProAnswer(ctx, 1, '–°—Ä–µ–¥–Ω–∏–π (6 –º–µ—Å—è—Ü–µ–≤ ‚Äì 2 –≥–æ–¥–∞)');
        break;
        
      case 'pro_q1_advanced':
        await handleProAnswer(ctx, 1, '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (–±–æ–ª–µ–µ 2 –ª–µ—Ç)');
        break;
        
      case 'pro_q1_custom':
        await ctx.editMessageText('‚úèÔ∏è **–°–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 1/5:**\n\nüèãÔ∏è **–ö–∞–∫–æ–π —É –≤–∞—Å —Ñ–∏—Ç–Ω–µ—Å —É—Ä–æ–≤–µ–Ω—å?**\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç:', {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'back_to_main' }]
            ]
          },
          parse_mode: 'Markdown'
        });
        break;
        
      case 'back_to_main':
        await ctx.editMessageText(TEXTS.WELCOME, {
          reply_markup: KEYBOARDS.MAIN_MENU,
          parse_mode: 'Markdown'
        });
        break;
        
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
      case data.startsWith('approve_') ? data : null:
        const approveUserId = data.split('_')[1];
        await ctx.editMessageText(`‚úÖ **–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!**\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${approveUserId} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ PRO MODE.`);
        break;
        
      case data.startsWith('reject_') ? data : null:
        const rejectUserId = data.split('_')[1];
        await ctx.editMessageText(`‚ùå **–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${rejectUserId} –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏.`);
        break;
    }
  } catch (error) {
    console.log(`Error handling callback ${data}:`, error.message);
  }
});

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ PRO –∑–∞—è–≤–∫–∏
async function handleProAnswer(ctx, step, answer) {
  const userId = ctx.from.id;
  const username = ctx.from.username || '–±–µ–∑ username';
  
  console.log(`Processing step ${step} for user ${userId}, answer: ${answer}`);
  
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞—è–≤–∫—É —Å –æ–¥–Ω–∏–º –æ—Ç–≤–µ—Ç–æ–º
  const application = {
    level: answer,
    frequency: '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
    goals: '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
    experience: '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
    special: '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
  };
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É
  const success = await sendProApplicationToAdmin(userId, username, application);
  
  if (success) {
    await ctx.editMessageText(
      '‚úÖ **–ó–∞—è–≤–∫–∞ –Ω–∞ PRO MODE –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!**\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\nüìû **–°–≤—è–∑—å:** @workoutbro_support',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
          ]
        },
        parse_mode: 'Markdown'
      }
    );
  } else {
    await ctx.editMessageText(
      '‚ùå **–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n\nüìû **–°–≤—è–∑—å:** @workoutbro_support',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
          ]
        },
        parse_mode: 'Markdown'
      }
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  const text = ctx.message.text;
  
  console.log(`Text message from user ${userId}: ${text}`);
  
  // –ü—Ä–æ—Å—Ç–∞—è –∑–∞—è–≤–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –æ—Ç–≤–µ—Ç–æ–º
  const username = ctx.from.username || '–±–µ–∑ username';
  const application = {
    level: text,
    frequency: '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
    goals: '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
    experience: '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
    special: '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
  };
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É
  const success = await sendProApplicationToAdmin(userId, username, application);
  
  if (success) {
    await ctx.reply(
      '‚úÖ **–ó–∞—è–≤–∫–∞ –Ω–∞ PRO MODE –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!**\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\nüìû **–°–≤—è–∑—å:** @workoutbro_support',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
          ]
        },
        parse_mode: 'Markdown'
      }
    );
  } else {
    await ctx.reply(
      '‚ùå **–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n\nüìû **–°–≤—è–∑—å:** @workoutbro_support',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
          ]
        },
        parse_mode: 'Markdown'
      }
    );
  }
});

console.log('Starting simple PRO bot...');
bot.launch()
  .then(() => {
    console.log('‚úÖ Simple PRO bot started!');
  })
  .catch((error) => {
    console.error('‚ùå Bot failed:', error);
    process.exit(1);
  });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', () => {
  console.log('Bot stopped');
  process.exit(0);
});

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

