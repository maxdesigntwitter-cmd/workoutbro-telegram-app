require('dotenv').config();
const { Telegraf } = require('telegraf');
const express = require('express');

const bot = new Telegraf(process.env.BOT_TOKEN);
const app = express();

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(express.json());

// –¢–µ–∫—Å—Ç—ã
const TEXTS = {
  WELCOME: '–ü—Ä–∏–≤–µ—Ç! –Ø WorkoutBro Bot. –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø—É—Ç—å:',
  FREE_COMMUNITY: 'üí™ <b>–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ</b>\n\n–≠—Ç–æ –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª WorkoutBro: –º–∏–Ω–∏-–≥–∞–π–¥—ã, —Ä–∞–∑–±–æ—Ä—ã –∏ –≤—ã–∑–æ–≤—ã.\n\n–•–æ—á–µ—à—å —Å–∏—Å—Ç–µ–º—É –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚Äî –∑–∞–≥–ª—è–Ω–∏ –≤ –∫–ª—É–±!',
  CLUB_LEVELS: 'üèÜ <b>–ó–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–±</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:',
  BASE_DESCRIPTION: 'üí™ <b>BASE MODE</b>\n\n‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ –ø–æ—Å—Ç–∞–º\n‚Ä¢ –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n‚Ä¢ –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\nüí∞ <b>–¶–µ–Ω–∞:</b> 990‚ÇΩ/–º–µ—Å—è—Ü',
  BRO_DESCRIPTION: 'üî• <b>BRO MODE</b>\n\n‚Ä¢ –í—Å–µ –∏–∑ BASE\n‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ —á–∞—Ç\n‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\nüí∞ <b>–¶–µ–Ω–∞:</b> 1990‚ÇΩ/–º–µ—Å—è—Ü',
  PRO_DESCRIPTION: 'üëë <b>PRO MODE</b>\n\n‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–æ–º\n‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\nüí∞ <b>–¶–µ–Ω–∞:</b> –ü–æ –∑–∞—è–≤–∫–µ'
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const KEYBOARDS = {
  MAIN_MENU: {
    inline_keyboard: [
      [{ text: 'üí™ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ\n—Å–æ–æ–±—â–µ—Å—Ç–≤–æ', callback_data: 'free_community' }],
      [{ text: 'üèÜ –ó–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–±', callback_data: 'paid_club' }]
    ]
  },
  FREE_COMMUNITY: {
    inline_keyboard: [
      [{ text: 'üëâ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', url: 'https://t.me/yourworkoutbro' }],
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
    ]
  },
  CLUB_LEVELS: {
    inline_keyboard: [
      [{ text: 'üí™ BASE', callback_data: 'level_base' }],
      [{ text: 'üî• BRO', callback_data: 'level_bro' }],
      [{ text: 'üëë PRO', callback_data: 'level_pro' }],
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
    ]
  },
  BASE_PAYMENT: {
    inline_keyboard: [
      [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url: 'https://t.me/tribute/app?startapp=sEo4' }],
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'paid_club' }]
    ]
  },
  BRO_PAYMENT: {
    inline_keyboard: [
      [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url: 'https://t.me/tribute/app?startapp=sEoi' }],
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'paid_club' }]
    ]
  },
  PRO_APPLICATION: {
    inline_keyboard: [
      [{ text: 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'pro_application' }],
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'paid_club' }]
    ]
  },
  PRO_QUESTIONS: {
    inline_keyboard: [
      [{ text: 'üèãÔ∏è –ù–æ–≤–∏—á–æ–∫ (–º–µ–Ω–µ–µ 6 –º–µ—Å—è—Ü–µ–≤)', callback_data: 'pro_q1_novice' }],
      [{ text: 'üí™ –°—Ä–µ–¥–Ω–∏–π (6 –º–µ—Å—è—Ü–µ–≤ ‚Äì 2 –≥–æ–¥–∞)', callback_data: 'pro_q1_intermediate' }],
      [{ text: 'üî• –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (–±–æ–ª–µ–µ 2 –ª–µ—Ç)', callback_data: 'pro_q1_advanced' }],
      [{ text: '‚úèÔ∏è –°–≤–æ–π –æ—Ç–≤–µ—Ç', callback_data: 'pro_q1_custom' }],
      [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'back_to_main' }]
    ]
  }
};

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω—É
async function sendProApplicationToAdmin(userId, username, answers) {
  const adminId = 6517942046;
  const botToken = process.env.BOT_TOKEN;
  
  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è HTML
  const escapeHtml = (text) => {
    if (!text) return '';
    return String(text)
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;');
  };
  
  const applicationMessage = `üìù <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ PRO MODE</b>\n\nüë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${escapeHtml(username)} (ID: ${userId})\n\nüìã <b>–î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:</b>\n\n1Ô∏è‚É£ <b>–§–∏—Ç–Ω–µ—Å —É—Ä–æ–≤–µ–Ω—å:</b> ${escapeHtml(answers.question_1)}\n2Ô∏è‚É£ <b>–ß–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</b> ${escapeHtml(answers.question_2)}\n3Ô∏è‚É£ <b>–¶–µ–ª–∏:</b> ${escapeHtml(answers.question_3)}\n4Ô∏è‚É£ <b>–ú–µ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</b> ${escapeHtml(answers.question_4)}\n5Ô∏è‚É£ <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b> ${escapeHtml(answers.question_5)}\n\nüí¨ <b>–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:</b> <a href="tg://user?id=${userId}">–ù–∞–ø–∏—Å–∞—Ç—å</a>`;
  
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', url: `tg://user?id=${userId}` }],
      [{ text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: `approve_${userId}` }],
      [{ text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: `reject_${userId}` }]
    ]
  };
  
  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: adminId,
        text: applicationMessage,
        parse_mode: 'HTML',
        reply_markup: keyboard
      })
    });
    
    const result = await response.json();
    
    if (result.ok) {
      console.log(`‚úÖ Admin notification sent for user ${userId}, message ID: ${result.result.message_id}`);
      return true;
    } else {
      console.log(`‚ùå Error sending admin notification: ${result.description}`);
      return false;
    }
  } catch (error) {
    console.log(`‚ùå Error sending admin notification: ${error.message}`);
    return false;
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  console.log(`User ${ctx.from.id} started bot`);
  try {
    await ctx.reply(TEXTS.WELCOME, {
      reply_markup: KEYBOARDS.MAIN_MENU,
      parse_mode: 'HTML'
    });
    console.log(`Reply sent to user ${ctx.from.id}`);
  } catch (error) {
    console.log(`Error sending reply to user ${ctx.from.id}:`, error.message);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /pro_application
bot.command('pro_application', async (ctx) => {
  console.log(`User ${ctx.from.id} requested PRO application`);
  try {
    await ctx.reply('üìù **–ó–∞—è–≤–∫–∞ –Ω–∞ PRO MODE**\n\n**–í–æ–ø—Ä–æ—Å 1/5:**\n\nüèãÔ∏è **–ö–∞–∫–æ–π —É –≤–∞—Å —Ñ–∏—Ç–Ω–µ—Å —É—Ä–æ–≤–µ–Ω—å?**', {
      reply_markup: KEYBOARDS.PRO_QUESTIONS,
      parse_mode: 'HTML'
    });
  } catch (error) {
    console.log(`Error sending PRO application to user ${ctx.from.id}:`, error.message);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query
bot.on('callback_query', async (ctx) => {
  const data = ctx.callbackQuery.data;
  const userId = ctx.from.id;
  const username = ctx.from.username || '–±–µ–∑ username';
  
  console.log(`Callback received: ${data} from user ${userId}`);
  
  await ctx.answerCbQuery();
  
  try {
    switch (data) {
      case 'free_community':
        await ctx.editMessageText(TEXTS.FREE_COMMUNITY, {
          reply_markup: KEYBOARDS.FREE_COMMUNITY,
          parse_mode: 'HTML'
        });
        break;
        
      case 'paid_club':
        await ctx.editMessageText(TEXTS.CLUB_LEVELS, {
          reply_markup: KEYBOARDS.CLUB_LEVELS,
          parse_mode: 'HTML'
        });
        break;
        
      case 'level_base':
        await ctx.editMessageText(TEXTS.BASE_DESCRIPTION, {
          reply_markup: KEYBOARDS.BASE_PAYMENT,
          parse_mode: 'HTML'
        });
        break;
        
      case 'level_bro':
        await ctx.editMessageText(TEXTS.BRO_DESCRIPTION, {
          reply_markup: KEYBOARDS.BRO_PAYMENT,
          parse_mode: 'HTML'
        });
        break;
        
      case 'level_pro':
        await ctx.editMessageText(TEXTS.PRO_DESCRIPTION, {
          reply_markup: KEYBOARDS.PRO_APPLICATION,
          parse_mode: 'HTML'
        });
        break;
        
      case 'pro_application':
        await ctx.editMessageText('üìù **–ó–∞—è–≤–∫–∞ –Ω–∞ PRO MODE**\n\n**–í–æ–ø—Ä–æ—Å 1/5:**\n\nüèãÔ∏è **–ö–∞–∫–æ–π —É –≤–∞—Å —Ñ–∏—Ç–Ω–µ—Å —É—Ä–æ–≤–µ–Ω—å?**', {
          reply_markup: KEYBOARDS.PRO_QUESTIONS,
          parse_mode: 'HTML'
        });
        break;
        
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã PRO –∑–∞—è–≤–∫–∏
      case 'pro_q1_novice':
        await handleProAnswer(ctx, 1, '–ù–æ–≤–∏—á–æ–∫ (–º–µ–Ω–µ–µ 6 –º–µ—Å—è—Ü–µ–≤)');
        break;
        
      case 'pro_q1_intermediate':
        await handleProAnswer(ctx, 1, '–°—Ä–µ–¥–Ω–∏–π (6 –º–µ—Å—è—Ü–µ–≤ ‚Äì 2 –≥–æ–¥–∞)');
        break;
        
      case 'pro_q1_advanced':
        await handleProAnswer(ctx, 1, '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (–±–æ–ª–µ–µ 2 –ª–µ—Ç)');
        break;
        
      case 'pro_q1_custom':
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        let userState = userStates.get(userId);
        if (!userState) {
          userState = { step: 1, answers: {} };
          userStates.set(userId, userState);
        }
        userState.waitingForCustomAnswer = 1;
        
        await ctx.editMessageText('‚úèÔ∏è <b>–°–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 1/5:</b>\n\nüèãÔ∏è <b>–ö–∞–∫–æ–π —É –≤–∞—Å —Ñ–∏—Ç–Ω–µ—Å —É—Ä–æ–≤–µ–Ω—å?</b>\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç:', {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'back_to_main' }]
            ]
          },
          parse_mode: 'HTML'
        });
        break;
        
      // –í–æ–ø—Ä–æ—Å 2 - —á–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
      case 'pro_q2_1_2':
        await handleProAnswer(ctx, 2, '1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é');
        break;
      case 'pro_q2_3_4':
        await handleProAnswer(ctx, 2, '3-4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é');
        break;
      case 'pro_q2_5_6':
        await handleProAnswer(ctx, 2, '5-6 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é');
        break;
      case 'pro_q2_daily':
        await handleProAnswer(ctx, 2, '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ');
        break;
      case 'pro_q2_custom':
        userState = userStates.get(userId);
        if (!userState) {
          userState = { step: 2, answers: {} };
          userStates.set(userId, userState);
        }
        userState.waitingForCustomAnswer = 2;
        
        await ctx.editMessageText('‚úèÔ∏è <b>–°–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 2/5:</b>\n\nüìÖ <b>–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç–µ—Å—å?</b>\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç:', {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'back_to_main' }]
            ]
          },
          parse_mode: 'HTML'
        });
        break;
        
      // –í–æ–ø—Ä–æ—Å 3 - —Ü–µ–ª–∏
      case 'pro_q3_mass':
        await handleProAnswer(ctx, 3, '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã');
        break;
      case 'pro_q3_weight_loss':
        await handleProAnswer(ctx, 3, '–ü–æ—Ö—É–¥–µ–Ω–∏–µ');
        break;
      case 'pro_q3_strength':
        await handleProAnswer(ctx, 3, '–°–∏–ª–∞');
        break;
      case 'pro_q3_endurance':
        await handleProAnswer(ctx, 3, '–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å');
        break;
      case 'pro_q3_custom':
        userState = userStates.get(userId);
        if (!userState) {
          userState = { step: 3, answers: {} };
          userStates.set(userId, userState);
        }
        userState.waitingForCustomAnswer = 3;
        
        await ctx.editMessageText('‚úèÔ∏è <b>–°–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 3/5:</b>\n\nüéØ <b>–ö–∞–∫–∏–µ —É –≤–∞—Å —Ü–µ–ª–∏?</b>\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç:', {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'back_to_main' }]
            ]
          },
          parse_mode: 'HTML'
        });
        break;
        
      // –í–æ–ø—Ä–æ—Å 4 - –º–µ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
      case 'pro_q4_home':
        await handleProAnswer(ctx, 4, '–î–æ–º–∞');
        break;
      case 'pro_q4_gym':
        await handleProAnswer(ctx, 4, '–í –∑–∞–ª–µ');
        break;
      case 'pro_q4_trainer':
        await handleProAnswer(ctx, 4, '–° —Ç—Ä–µ–Ω–µ—Ä–æ–º');
        break;
      case 'pro_q4_outdoor':
        await handleProAnswer(ctx, 4, '–ù–∞ —É–ª–∏—Ü–µ');
        break;
      case 'pro_q4_custom':
        userState = userStates.get(userId);
        if (!userState) {
          userState = { step: 4, answers: {} };
          userStates.set(userId, userState);
        }
        userState.waitingForCustomAnswer = 4;
        
        await ctx.editMessageText('‚úèÔ∏è <b>–°–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 4/5:</b>\n\nüèãÔ∏è <b>–ì–¥–µ –≤—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç–µ—Å—å?</b>\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç:', {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'back_to_main' }]
            ]
          },
          parse_mode: 'HTML'
        });
        break;
        
      // –í–æ–ø—Ä–æ—Å 5 - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
      case 'pro_q5_none':
        await handleProAnswer(ctx, 5, '–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π');
        break;
      case 'pro_q5_injuries':
        await handleProAnswer(ctx, 5, '–ï—Å—Ç—å —Ç—Ä–∞–≤–º—ã');
        break;
      case 'pro_q5_time':
        await handleProAnswer(ctx, 5, '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è');
        break;
      case 'pro_q5_home_only':
        await handleProAnswer(ctx, 5, '–¢–æ–ª—å–∫–æ –¥–æ–º–∞');
        break;
      case 'pro_q5_custom':
        userState = userStates.get(userId);
        if (!userState) {
          userState = { step: 5, answers: {} };
          userStates.set(userId, userState);
        }
        userState.waitingForCustomAnswer = 5;
        
        await ctx.editMessageText('‚úèÔ∏è <b>–°–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 5/5:</b>\n\n‚ö†Ô∏è <b>–ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏?</b>\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç:', {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'back_to_main' }]
            ]
          },
          parse_mode: 'HTML'
        });
        break;
        
      case 'back_to_main':
        await ctx.editMessageText(TEXTS.WELCOME, {
          reply_markup: KEYBOARDS.MAIN_MENU,
          parse_mode: 'HTML'
        });
        break;
        
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
      case data.startsWith('approve_') ? data : null:
        const approveUserId = data.split('_')[1];
        await ctx.editMessageText(`‚úÖ **–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!**\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${approveUserId} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ PRO MODE.`);
        break;
        
      case data.startsWith('reject_') ? data : null:
        const rejectUserId = data.split('_')[1];
        await ctx.editMessageText(`‚ùå **–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${rejectUserId} –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏.`);
        break;
    }
  } catch (error) {
    console.log(`Error handling callback ${data}:`, error.message);
  }
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∑–∞—è–≤–æ–∫ PRO
const userStates = new Map();

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ PRO –∑–∞—è–≤–∫–∏
async function handleProAnswer(ctx, step, answer) {
  const userId = ctx.from.id;
  const username = ctx.from.username || '–±–µ–∑ username';
  
  console.log(`Processing step ${step} for user ${userId}, answer: ${answer}`);
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  let userState = userStates.get(userId);
  if (!userState) {
    userState = {
      step: 1,
      answers: {}
    };
    userStates.set(userId, userState);
    console.log(`Created new user state for user ${userId}`);
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
  userState.answers[`question_${step}`] = answer;
  userState.step = step + 1;
  
  console.log(`Updated user state for user ${userId}:`, userState);
  
  // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π
  if (step < 5) {
    console.log(`Showing next question ${step + 1} for user ${userId}`);
    await showNextQuestion(ctx, step + 1);
  } else {
    console.log(`Completing application for user ${userId}`);
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞—è–≤–∫—É
    await completeProApplication(ctx, userState.answers);
    userStates.delete(userId);
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
async function showNextQuestion(ctx, step) {
  const userId = ctx.from.id;
  const userState = userStates.get(userId);
  
  if (!userState) {
    console.log(`No user state found for user ${userId}`);
    return;
  }
  
  const questions = {
    2: {
      text: `‚úÖ <b>–§–∏—Ç–Ω–µ—Å —É—Ä–æ–≤–µ–Ω—å:</b> ${userState.answers.question_1}\n\n<b>–í–æ–ø—Ä–æ—Å 2/5:</b>\n\nüìÖ <b>–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç–µ—Å—å?</b>`,
      keyboard: {
        inline_keyboard: [
          [{ text: 'üèÉ 1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é', callback_data: 'pro_q2_1_2' }],
          [{ text: 'üí™ 3-4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é', callback_data: 'pro_q2_3_4' }],
          [{ text: 'üî• 5-6 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é', callback_data: 'pro_q2_5_6' }],
          [{ text: 'üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ', callback_data: 'pro_q2_daily' }],
          [{ text: '‚úèÔ∏è –°–≤–æ–π –æ—Ç–≤–µ—Ç', callback_data: 'pro_q2_custom' }],
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'back_to_main' }]
        ]
      }
    },
    3: {
      text: `‚úÖ <b>–§–∏—Ç–Ω–µ—Å —É—Ä–æ–≤–µ–Ω—å:</b> ${userState.answers.question_1}\n‚úÖ <b>–ß–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</b> ${userState.answers.question_2}\n\n<b>–í–æ–ø—Ä–æ—Å 3/5:</b>\n\nüéØ <b>–ö–∞–∫–∏–µ —É –≤–∞—Å —Ü–µ–ª–∏?</b>`,
      keyboard: {
        inline_keyboard: [
          [{ text: 'üí™ –ù–∞–±–æ—Ä –º–∞—Å—Å—ã', callback_data: 'pro_q3_mass' }],
          [{ text: 'üî• –ü–æ—Ö—É–¥–µ–Ω–∏–µ', callback_data: 'pro_q3_weight_loss' }],
          [{ text: 'üí™ –°–∏–ª–∞', callback_data: 'pro_q3_strength' }],
          [{ text: 'üèÉ –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å', callback_data: 'pro_q3_endurance' }],
          [{ text: '‚úèÔ∏è –°–≤–æ–π –æ—Ç–≤–µ—Ç', callback_data: 'pro_q3_custom' }],
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'back_to_main' }]
        ]
      }
    },
    4: {
      text: `‚úÖ <b>–§–∏—Ç–Ω–µ—Å —É—Ä–æ–≤–µ–Ω—å:</b> ${userState.answers.question_1}\n‚úÖ <b>–ß–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</b> ${userState.answers.question_2}\n‚úÖ <b>–¶–µ–ª–∏:</b> ${userState.answers.question_3}\n\n<b>–í–æ–ø—Ä–æ—Å 4/5:</b>\n\nüèãÔ∏è <b>–ì–¥–µ –≤—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç–µ—Å—å?</b>`,
      keyboard: {
        inline_keyboard: [
          [{ text: 'üè† –î–æ–º–∞', callback_data: 'pro_q4_home' }],
          [{ text: 'üèãÔ∏è –í –∑–∞–ª–µ', callback_data: 'pro_q4_gym' }],
          [{ text: 'üë®‚Äçüè´ –° —Ç—Ä–µ–Ω–µ—Ä–æ–º', callback_data: 'pro_q4_trainer' }],
          [{ text: 'üå≥ –ù–∞ —É–ª–∏—Ü–µ', callback_data: 'pro_q4_outdoor' }],
          [{ text: '‚úèÔ∏è –°–≤–æ–π –æ—Ç–≤–µ—Ç', callback_data: 'pro_q4_custom' }],
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'back_to_main' }]
        ]
      }
    },
    5: {
      text: `‚úÖ <b>–§–∏—Ç–Ω–µ—Å —É—Ä–æ–≤–µ–Ω—å:</b> ${userState.answers.question_1}\n‚úÖ <b>–ß–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</b> ${userState.answers.question_2}\n‚úÖ <b>–¶–µ–ª–∏:</b> ${userState.answers.question_3}\n‚úÖ <b>–ú–µ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</b> ${userState.answers.question_4}\n\n<b>–í–æ–ø—Ä–æ—Å 5/5:</b>\n\n‚ö†Ô∏è <b>–ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏?</b>`,
      keyboard: {
        inline_keyboard: [
          [{ text: '‚úÖ –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π', callback_data: 'pro_q5_none' }],
          [{ text: 'ü©π –ï—Å—Ç—å —Ç—Ä–∞–≤–º—ã', callback_data: 'pro_q5_injuries' }],
          [{ text: '‚è∞ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è', callback_data: 'pro_q5_time' }],
          [{ text: 'üè† –¢–æ–ª—å–∫–æ –¥–æ–º–∞', callback_data: 'pro_q5_home_only' }],
          [{ text: '‚úèÔ∏è –°–≤–æ–π –æ—Ç–≤–µ—Ç', callback_data: 'pro_q5_custom' }],
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'back_to_main' }]
        ]
      }
    }
  };
  
  const question = questions[step];
  if (question) {
    await ctx.editMessageText(question.text, {
      reply_markup: question.keyboard,
      parse_mode: 'HTML'
    });
  } else {
    console.log(`No question found for step ${step}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
async function completeProApplication(ctx, answers) {
  const userId = ctx.from.id;
  const username = ctx.from.username || '–±–µ–∑ username';
  
  console.log(`Completing application for user ${userId}:`, answers);
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É
    console.log(`Sending application to admin for user ${userId}`);
    const success = await sendProApplicationToAdmin(userId, username, answers);
    
    if (success) {
      console.log(`Application sent successfully for user ${userId}`);
      await ctx.editMessageText(
        '‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ PRO MODE –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\nüìû <b>–°–≤—è–∑—å:</b> @workoutbro_support',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
            ]
          },
          parse_mode: 'HTML'
        }
      );
    } else {
      console.log(`Failed to send application for user ${userId}`);
      await ctx.editMessageText(
        '‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n\nüìû <b>–°–≤—è–∑—å:</b> @workoutbro_support',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
            ]
          },
          parse_mode: 'HTML'
        }
      );
    }
  } catch (error) {
    console.log(`Error in completeProApplication for user ${userId}:`, error.message);
    await ctx.editMessageText(
      '‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n\nüìû <b>–°–≤—è–∑—å:</b> @workoutbro_support',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
          ]
        },
        parse_mode: 'HTML'
      }
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  const text = ctx.message.text;
  
  console.log(`Text message from user ${userId}: ${text}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—è–≤–∫—É
  const userState = userStates.get(userId);
  if (userState && userState.waitingForCustomAnswer) {
    const step = userState.waitingForCustomAnswer;
    userState.answers[`question_${step}`] = text;
    userState.waitingForCustomAnswer = null;
    userState.step = step + 1;
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    if (step < 5) {
      await showNextQuestion(ctx, step + 1);
    } else {
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞—è–≤–∫—É
      await completeProApplication(ctx, userState.answers);
      userStates.delete(userId);
    }
    return;
  }
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  console.log(`User ${userId} is not filling application, ignoring message`);
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
const PORT = process.env.PORT || 3000;

// Middleware –¥–ª—è webhook
app.use(bot.webhookCallback('/webhook'));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.json({
    status: 'ok',
    bot: 'WorkoutBro Bot',
    uptime: process.uptime(),
    timestamp: new Date().toISOString(),
    version: '1.0.0'
  });
});

// Health check
app.get('/health', (req, res) => {
  res.json({ 
    status: 'healthy', 
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ WorkoutBro Bot started on port ${PORT}`);
  console.log(`üì° Webhook endpoint: /webhook`);
  console.log(`üåê Health check: /health`);
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Render
const webhookUrl = process.env.RENDER_EXTERNAL_URL || process.env.WEBHOOK_URL;
if (webhookUrl) {
  bot.telegram.setWebhook(`${webhookUrl}/webhook`)
    .then(() => {
      console.log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}/webhook`);
    })
    .catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
    });
} else {
  console.log('‚ö†Ô∏è  Webhook URL –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ polling —Ä–µ–∂–∏–º');
  // Fallback –Ω–∞ polling –µ—Å–ª–∏ webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
  bot.launch()
    .then(() => {
      console.log('‚úÖ Bot started with polling');
    })
    .catch((error) => {
      console.error('‚ùå Bot failed:', error);
    });
}

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('SIGTERM received, shutting down gracefully');
  bot.stop('SIGTERM');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('SIGINT received, shutting down gracefully');
  bot.stop('SIGINT');
  process.exit(0);
});
